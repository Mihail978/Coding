import java.util.*;

public class NFA {
    private Set<Integer> states;
    private Set<Character> alphabet;
    private Map<Integer, Map<Character, Set<Integer>>> transitions;
    private int startState;
    private Set<Integer> acceptStates;
    private String id;

    public NFA(String id) {
        this.id = id;
        this.states = new HashSet<Integer>();
        this.alphabet = new HashSet<Character>();
        this.transitions = new HashMap<Integer, Map<Character, Set<Integer>>>();
        this.acceptStates = new HashSet<Integer>();
    }

    public void addState(int state) {
        states.add(state);
        if (!transitions.containsKey(state)) {
            transitions.put(state, new HashMap<Character, Set<Integer>>());
        }
    }

    public void addTransition(int from, char symbol, int to) {
        alphabet.add(symbol);
        if (!transitions.containsKey(from)) {
            transitions.put(from, new HashMap<Character, Set<Integer>>());
        }
        if (!transitions.get(from).containsKey(symbol)) {
            transitions.get(from).put(symbol, new HashSet<Integer>());
        }
        transitions.get(from).get(symbol).add(to);
    }

    public void setStartState(int state) {
        startState = state;
        addState(state);
    }

    public void addAcceptState(int state) {
        acceptStates.add(state);
        addState(state);
    }

    public boolean isEmpty() {
        return !recognizeRecursive(startState, "", 0, new HashSet<String>());
    }

    public boolean isDeterministic() {
        for (Map<Character, Set<Integer>> map : transitions.values()) {
            for (Set<Integer> targets : map.values()) {
                if (targets.size() > 1) return false;
            }
        }
        return true;
    }

    public boolean recognize(String word) {
        return recognizeRecursive(startState, word, 0, new HashSet<String>());
    }

    private boolean recognizeRecursive(int currentState, String word, int index, Set<String> visited) {
        String key = currentState + ":" + index;
        if (visited.contains(key)) return false;
        visited.add(key);

        if (index == word.length()) {
            if (acceptStates.contains(currentState)) return true;
            if (transitions.containsKey(currentState) && transitions.get(currentState).containsKey('e')) {
                for (int next : transitions.get(currentState).get('e')) {
                    if (recognizeRecursive(next, word, index, visited)) return true;
                }
            }
            return false;
        }

        char symbol = word.charAt(index);
        if (transitions.containsKey(currentState) && transitions.get(currentState).containsKey(symbol)) {
            for (int next : transitions.get(currentState).get(symbol)) {
                if (recognizeRecursive(next, word, index + 1, visited)) return true;
            }
        }

        if (transitions.containsKey(currentState) && transitions.get(currentState).containsKey('e')) {
            for (int next : transitions.get(currentState).get('e')) {
                if (recognizeRecursive(next, word, index, visited)) return true;
            }
        }

        return false;
    }

    public void print() {
        System.out.println("Automatic  ID: " + id);
        System.out.println("Conditions: " + states);
        System.out.println("Start condition: " + startState);
        System.out.println("Receiving condition: " + acceptStates);
        System.out.println("Transitions:");

        for (Integer from : transitions.keySet()) {
            Map<Character, Set<Integer>> inner = transitions.get(from);
            for (Character symbol : inner.keySet()) {
                for (Integer to : inner.get(symbol)) {
                    if (symbol == 'ε' || symbol == '\0') {
                        System.out.println(from + " --ε--> " + to);
                    } else {
                        System.out.println(from + " --" + symbol + "--> " + to);
                    }
                }
            }
        }
    }

    public Set<Integer> getStates() { return states; }
    public int getStartState() { return startState; }
    public Set<Integer> getAcceptStates() { return acceptStates; }
    public Map<Integer, Map<Character, Set<Integer>>> getTransitions() { return transitions; }
    public String getId() { return id; }

    public NFA determinize(String newId) {
        NFA dfa = new NFA(newId);
        dfa.setDeterministic(true);
        return dfa;
    }

    public boolean isFinite() {

        for (Integer state : transitions.keySet()) {
            if (transitions.get(state).containsKey("ε") && transitions.get(state).get("ε").contains(state)) {
                return false;
            }
        }
        return true;
    }
    private boolean isDeterministic = false;

    public void setDeterministic(boolean deterministic) {
        this.isDeterministic = deterministic;
    }


}






import java.util.*;

public class NFAOperations {
    public static NFA union(NFA a1, NFA a2, String newId) {
        NFA result = new NFA(newId);
        int offset = Collections.max(a1.getStates()) + 1;

        for (int s : a1.getStates()) result.addState(s);
        for (int s : a2.getStates()) result.addState(s + offset);

        Map<Integer, Map<Character, Set<Integer>>> t1 = a1.getTransitions();
        Map<Integer, Map<Character, Set<Integer>>> t2 = a2.getTransitions();

        for (Integer from : t1.keySet()) {
            for (Character symbol : t1.get(from).keySet()) {
                for (Integer to : t1.get(from).get(symbol)) {
                    result.addTransition(from, symbol, to);
                }
            }
        }

        for (Integer from : t2.keySet()) {
            for (Character symbol : t2.get(from).keySet()) {
                for (Integer to : t2.get(from).get(symbol)) {
                    result.addTransition(from + offset, symbol, to + offset);
                }
            }
        }

        int newStart = Collections.max(result.getStates()) + 1;
        result.addState(newStart);
        result.setStartState(newStart);
        result.addTransition(newStart, 'e', a1.getStartState());
        result.addTransition(newStart, 'e', a2.getStartState() + offset);

        for (int a : a1.getAcceptStates()) result.addAcceptState(a);
        for (int a : a2.getAcceptStates()) result.addAcceptState(a + offset);

        return result;
    }

    public static NFA concat(NFA a1, NFA a2, String newId) {
        NFA result = new NFA(newId);
        int offset = Collections.max(a1.getStates()) + 1;

        for (int s : a1.getStates()) result.addState(s);
        for (int s : a2.getStates()) result.addState(s + offset);

        Map<Integer, Map<Character, Set<Integer>>> t1 = a1.getTransitions();
        Map<Integer, Map<Character, Set<Integer>>> t2 = a2.getTransitions();

        for (Integer from : t1.keySet()) {
            for (Character symbol : t1.get(from).keySet()) {
                for (Integer to : t1.get(from).get(symbol)) {
                    result.addTransition(from, symbol, to);
                }
            }
        }

        for (Integer from : t2.keySet()) {
            for (Character symbol : t2.get(from).keySet()) {
                for (Integer to : t2.get(from).get(symbol)) {
                    result.addTransition(from + offset, symbol, to + offset);
                }
            }
        }

        for (int a : a1.getAcceptStates()) {
            result.addTransition(a, 'e', a2.getStartState() + offset);
        }

        result.setStartState(a1.getStartState());
        for (int a : a2.getAcceptStates()) result.addAcceptState(a + offset);

        return result;
    }

    public static NFA kleeneStar(NFA base, String newId) {
        NFA result = new NFA(newId);
        int offset = Collections.max(base.getStates()) + 1;

        for (int s : base.getStates()) result.addState(s);
        Map<Integer, Map<Character, Set<Integer>>> t = base.getTransitions();
        for (Integer from : t.keySet()) {
            for (Character symbol : t.get(from).keySet()) {
                for (Integer to : t.get(from).get(symbol)) {
                    result.addTransition(from, symbol, to);
                }
            }
        }

        int newStart = offset + 1;
        result.addState(newStart);
        result.setStartState(newStart);
        result.addAcceptState(newStart);
        result.addTransition(newStart, 'e', base.getStartState());

        for (int a : base.getAcceptStates()) {
            result.addAcceptState(a);
            result.addTransition(a, 'e', newStart);
        }

        return result;
    }

    public static NFA fromRegex(String regex, String newId) {
        NFA result = new NFA(newId);
        result.setStartState(0);
        result.addAcceptState(1);
        for (int i = 0; i < regex.length(); i++) {
            result.addTransition(0, regex.charAt(i), 1);
        }
        return result;
    }
}




import java.io.*;
import java.util.*;

public class NFAFileManager {

    public static void saveToFile(NFA nfa, String filename) throws IOException {
        PrintWriter writer = new PrintWriter(new FileWriter(filename));

        writer.println("id: " + nfa.getId());
        writer.println("start: " + nfa.getStartState());

        StringBuilder accept = new StringBuilder();
        for (int state : nfa.getAcceptStates()) {
            accept.append(state).append(",");
        }
        if (accept.length() > 0) {
            accept.setLength(accept.length() - 1);
        }
        writer.println("accepting: " + accept);

        Map<Integer, Map<Character, Set<Integer>>> transitions = nfa.getTransitions();
        for (Integer from : transitions.keySet()) {
            for (Character symbol : transitions.get(from).keySet()) {
                for (Integer to : transitions.get(from).get(symbol)) {
                    writer.println("transition: " + from + " " + symbol + " " + to);
                }
            }
        }

        writer.close();
    }

    public static NFA loadFromFile(String filename) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(filename));

        String idLine = reader.readLine().trim(); // id: A1
        String startLine = reader.readLine().trim(); // start: 0
        String acceptLine = reader.readLine().trim(); // accepting: 2

        String id = idLine.split(":")[1].trim();
        int start = Integer.parseInt(startLine.split(":")[1].trim());
        String[] accepting = acceptLine.split(":")[1].trim().split(",");

        NFA nfa = new NFA(id);
        nfa.setStartState(start);
        for (String acc : accepting) {
            if (!acc.isEmpty()) {
                nfa.addAcceptState(Integer.parseInt(acc.trim()));
            }
        }

        String line;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) continue;
            if (line.startsWith("transition:")) {
                String[] parts = line.substring("transition:".length()).trim().split(" ");
                int from = Integer.parseInt(parts[0]);
                char symbol = parts[1].charAt(0);
                int to = Integer.parseInt(parts[2]);
                nfa.addTransition(from, symbol, to);
            }
        }

        reader.close();
        return nfa;
    }
}


import java.util.*;
import java.io.*;

public class CommandHandler {
    private Map<String, NFA> automata;
    private Scanner scanner;

    public CommandHandler() {
        this.automata = new HashMap<>();
        this.scanner = new Scanner(System.in);
    }

    public void run() {
        System.out.println("Welcome! Enter a command (or 'exit' to exit)");
        while (true) {
            System.out.print("> ");
            String input = scanner.nextLine().trim();
            if (input.isEmpty()) continue;

            String[] tokens = input.split(" ");
            String command = tokens[0];

            try {
                switch (command) {
                    case "exit":
                        System.out.println("Exiting...");
                        return;
                    case "help":
                        printHelp();
                        break;
                    case "list":
                        automata.keySet().forEach(System.out::println);
                        break;
                    case "print":
                        automata.get(tokens[1]).print();
                        break;
                    case "save":
                        if (tokens[1].equals("as")) {
                            NFAFileManager.saveToFile(automata.get(tokens[2]), tokens[3]);
                        } else {
                            NFAFileManager.saveToFile(automata.get(tokens[1]), tokens[2]);
                        }
                        System.out.println("Saved successfully.");
                        break;
                    case "open": {
                        NFA loaded = NFAFileManager.loadFromFile(tokens[1]);
                        if (automata.containsKey(loaded.getId())) {
                            System.out.println("Warning: ID already exists, not adding.");
                        } else {
                            automata.put(loaded.getId(), loaded);
                            System.out.println("Loaded successfully.");
                        }
                        break;
                    }
                    case "empty":
                        System.out.println(automata.get(tokens[1]).isEmpty() ? "Empty language" : "Not empty language");
                        break;
                    case "deterministic":
                        System.out.println(automata.get(tokens[1]).isDeterministic() ? "Deterministic" : "Non-deterministic");
                        break;
                    case "recognize":
                        System.out.println(automata.get(tokens[1]).recognize(tokens[2]) ? "Accepts" : "Rejects");
                        break;
                    case "union": {
                        String id1 = tokens[1], id2 = tokens[2], newId = tokens[3];
                        if (automata.containsKey(newId)) {
                            System.out.println("ID already used.");
                        } else {
                            NFA result = NFAOperations.union(automata.get(id1), automata.get(id2), newId);
                            automata.put(newId, result);
                            System.out.println("Union complete.");
                        }
                        break;
                    }
                    case "concat": {
                        String id1 = tokens[1], id2 = tokens[2], newId = tokens[3];
                        if (automata.containsKey(newId)) {
                            System.out.println("ID already used.");
                        } else {
                            NFA result = NFAOperations.concat(automata.get(id1), automata.get(id2), newId);
                            automata.put(newId, result);
                            System.out.println("Concatenation complete.");
                        }
                        break;
                    }
                    case "un": {
                        String id = tokens[1], newId = tokens[2];
                        if (automata.containsKey(newId)) {
                            System.out.println("ID already used.");
                        } else {
                            NFA result = NFAOperations.kleeneStar(automata.get(id), newId);
                            automata.put(newId, result);
                            System.out.println("Kleene star complete.");
                        }
                        break;
                    }
                    case "reg": {
                        String regex = tokens[1], newId = tokens[2];
                        if (automata.containsKey(newId)) {
                            System.out.println("ID already used.");
                        } else {
                            NFA result = NFAOperations.fromRegex(regex, newId);
                            automata.put(newId, result);
                            System.out.println("Regex to NFA complete.");
                        }
                        break;
                    }
                    case "mutate": {
                        String id = tokens[1], newId = tokens[2];
                        if (automata.containsKey(newId)) {
                            System.out.println("ID already used.");
                        } else {
                            NFA determinized = automata.get(id).determinize(newId);
                            automata.put(newId, determinized);
                            System.out.println("Determinization complete.");
                        }
                        break;
                    }
                    case "isfinite": {
                        System.out.println(automata.get(tokens[1]).isFinite() ? "Finite" : "Infinite");
                        break;
                    }
                    default:
                        System.out.println("Unknown command.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    private void printHelp() {
        System.out.println("Available commands:");
        System.out.println("list, print <id>, save <id> <file>, save as <id> <file>");
        System.out.println("open <file>, empty <id>, deterministic <id>, recognize <id> <word>");
        System.out.println("union <id1> <id2> <newId>, concat <id1> <id2> <newId>, un <id> <newId>");
        System.out.println("reg <regex> <newId>, mutate <id> <newId>, isfinite <id>, help, exit");
    }
}




import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        CommandHandler handler = new CommandHandler();
        handler.run();
    }
}









